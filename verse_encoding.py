# -*- coding: utf-8 -*-
"""Verse Encoding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Fireblossom/Cyber_Poem/blob/master/Verse%20Encoding.ipynb

## To-do

+ 对象：
    + 五绝（二联，四句）
    + 五律（四联，八句）
+ 原始诗歌文本预处理（分字）
+ 采用《平水韵》韵书判断平仄（问题：多音字）
+ 判断符合格律：
    + 五绝（律）平起首句入韵
    + 五绝（律）仄起首句入韵
    + 五绝（律）平起首句不入韵
    + 五绝（律）仄起首句不入韵
+ 判断押韵
    + 失粘、失对、三平、孤平
+ 编码使符合 TEI Verse 格式
    + 解读 TEI Verse 标签******
"""

# encoding=utf-8
import jieba
import nltk
import json
import re


def flatten(l):
    return [item for sublist in l for item in sublist]


with open("data/rhymebooks.json") as output:
    rhymes = json.load(output)
with open("data/TC2SC.json") as output:
    T2C = json.load(output)
with open("data/kangxi.json") as output:
    Dict = json.load(output)

print(Dict['煜'])

# 《平水韵》有入声，《中华新韵》无。
# 诗用《平水韵》，词用《词林正韵》
P_PING_unflattened = rhymes['平水韵'][0]
Z_PING_unflattened = rhymes['平水韵'][1]
P_PING = flatten(rhymes['平水韵'][0])
Z_PING = flatten(rhymes['平水韵'][1])
# P_ZHXY = flatten(rhymes['中华新韵'][0])
# Z_ZHXY = flatten(rhymes['中华新韵'][1])

raw1 = "白日依山尽，黄河入海流。欲穷千里目，更上一层楼。"
raw2 = "迟日江山丽，春风花草香。泥融飞燕子，沙暖睡鸳鸯。"
raw3 = "鸣筝金粟柱, 素手玉房前, 欲得周郎顾, 时时误拂弦"
raw4 = "花明绮陌春，柳拂御沟新。为报辽阳客，流芳不待人。"
raw5 = "北斗七星高，哥舒夜带刀。至今窥牧马，不敢过临洮。"
raw6 = "离离原上草，一岁一枯荣。野火烧不尽，春风吹又生。"

raw7 = "泠泠七弦上，静听松风寒。古调虽自爱，今人多不弹。"


def preprocess(raw):
    clean = re.sub(r'[，。, .]', "", raw)
    tokens = [token for token in clean if token]
    tones = []
    for t in tokens:
        if t in P_PING:
            if t in Z_PING:
                tones.append('1/0')
            else:
                tones.append('1')
        else:
            tones.append('0')
    return tokens, tones


METRICS = []

# 五绝平起首句入韵
METRICS.append([
    '1', '1', '1/0', '0', '1',
    '1/0', '0', '0', '1', '1',
    '1/0', '0', '1', '1', '0',
    '1', '1', '1/0', '0', '1'])
# 五绝平起首句不入韵
METRICS.append([
    '1/0', '1', '1', '0', '0',
    '1/0', '0', '0', '1', '1',
    '1/0', '0', '1', '1', '0',
    '1', '1', '1/0', '0', '1'])
# 五绝仄起首句入韵
METRICS.append([
    '1/0', '0', '0', '1', '1',
    '1', '1', '1/0', '0', '1',
    '1/0', '1', '1', '0', '0',
    '1/0', '0', '0', '1', '1'])
# 五绝仄起首句不入韵
METRICS.append([
    '1/0', '0', '1', '1', '0',
    '1', '1', '1/0', '0', '1',
    '1/0', '1', '1', '0', '0',
    '1/0', '0', '0', '1', '1'])


def metrics_analytics(verse, metrics):
    tokens, tones = verse
    print('五绝')
    count = 0
    RBOOK = P_PING_unflattened
    if tones[1] == '1':
        print('平起')
        metric = metrics[:2]
    else:
        print('仄起')
        metric = metrics[2:]

    for k, v in enumerate(RBOOK):
        if tokens[9] in v and tokens[19] in v:
            if tones[4] == '1':
                num_metrics = 0
                print('首句入韵')
            else:
                num_metrics = 1
                print('首句不入韵')

                for k, (l1, l2) in enumerate(zip(tones, metric[num_metrics])):
                    if l1 == '1/0':
                        print("[检测到多音字", tokens[k], "]")
                    elif l2 == '1/0':
                        pass
                    elif l1 != l2 and k % 5 != 0:
                        if l1 == '0':
                            print(tokens[k], "失配,建议：仄")
                        else:
                            print(tokens[k], "失配,建议：平")
                        count += 1

    print('失配词数', count)


verse1 = preprocess(raw1)
verse2 = preprocess(raw2)
verse3 = preprocess(raw3)
verse4 = preprocess(raw4)
verse5 = preprocess(raw5)
verse6 = preprocess(raw6)
verse7 = preprocess(raw7)

metrics_analytics(verse1, METRICS)

metrics_analytics(verse2, METRICS)

metrics_analytics(verse3, METRICS)

metrics_analytics(verse4, METRICS)

metrics_analytics(verse5, METRICS)

metrics_analytics(verse6, METRICS)

metrics_analytics(verse7, METRICS)
